import time
import threading
import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
from scipy.special import softmax
from collections import defaultdict
import numpy as np

from parser.news_parser import CryptoPanicParser
from mood.mood import SentimentAnalysis
from db import MainDatabase
from loggings import LoggerManager

logger = LoggerManager().get_main_logger()

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainApp:
    def __init__(self):
        self.parser = CryptoPanicParser()
        # self.data_base = MainDatabase()
        self.sentiment_analysis = SentimentAnalysis()
        self.scheduler = BackgroundScheduler()

        self.sentiment_results = {}

    def fetch_and_store_news(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç."""
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic –≤ {datetime.now()}")
        self.parser.run()  # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    def group_and_analyze_news(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤."""
        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ {datetime.now()}")
        data_base = MainDatabase()
        grouped_news = data_base.get_news_by_currency()
        
        self.sentiment_results = defaultdict(list) 
        self.sentiment_results.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        sentiment_aggregates = defaultdict(list)  # –î–ª—è —Å–±–æ—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π

        for currency, news_items in grouped_news.items():
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {currency}")
            for title, currency_tags in news_items:
                # logger.debug(f"–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π text:{title}")
                sentiment = self.sentiment_analysis.analyze_sentiment(title) # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
                self.sentiment_results[currency].append((title, sentiment))

                sentiment_aggregates[currency].append([
                    sentiment['negative'],
                    sentiment['neutral'],
                    sentiment['positive']
                ])

                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}")
         # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        for currency, values in sentiment_aggregates.items():
            average = np.mean(values, axis=0)
            avg_sentiment = {
                'negative': round(average[0], 3),
                'neutral': round(average[1], 3),
                'positive': round(average[2], 3)
            }
            logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ {currency}: {avg_sentiment}")
            self.sentiment_results[currency + "_average"] = avg_sentiment

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (—Å—Ä–∞–∑—É –∏ –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)
        self.scheduler.add_job(
            self.fetch_and_store_news,
            'interval',
            minutes=30,
            next_run_time=datetime.now()
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ (—Ç–æ–∂–µ —Å—Ä–∞–∑—É)
        self.scheduler.add_job(
            self.group_and_analyze_news,
            'interval',
            hours=12,
            next_run_time=datetime.now()
        )

        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()

        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –≤ –∂–∏–≤—ã—Ö
        try:
            while True:
                time.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            self.scheduler.shutdown()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = MainApp()
    app.start()