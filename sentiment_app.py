import time
import threading
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
from scipy.special import softmax
from collections import defaultdict
import numpy as np

from parser.news_parser import CryptoPanicParser
from mood.mood import SentimentAnalysis
from db_sentiment_app import MainDatabase
from loggings import LoggerManager

logger = LoggerManager().get_named_logger("news_analyzer")
logger_res = LoggerManager().get_named_logger("news_analyzer_results")

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainApp:
    """
        –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π, –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
            [currency + "_average_all"] - —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—è–º
            [currency + "_average_strong"] - —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é > 0.7
            [currency + "_count_stats"] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏ —Ç.–¥.)
    """
    def __init__(self):
        self.parser = CryptoPanicParser()
        self.sentiment_analysis = SentimentAnalysis()
        self.scheduler = BackgroundScheduler()

        self.sentiment_results = defaultdict(list) 
        self.results_lock = threading.Lock()  # –î–æ–±–∞–≤–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É

    def fetch_and_store_news(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç."""
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic –≤ {datetime.now()}")
        self.parser.run()  # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    def group_and_analyze_news(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤."""
        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ {datetime.now()}")
        data_base = MainDatabase()
        grouped_news = data_base.get_news_by_currency()
        
        # self.sentiment_results.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        sentiment_aggregates = defaultdict(list)  # –î–ª—è —Å–±–æ—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –î–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        threshold_aggregates = defaultdict(list)  # –¢–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –æ–¥–Ω–∞ –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π > 0.7
        sentiment_counts_by_currency = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
        temp_results = defaultdict(list)

        for currency, news_items in grouped_news.items():
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {currency}")
            sentiment_counts = {'negative': 0, 'neutral': 0, 'positive': 0, 'undefined': 0}

            for title, currency_tags in news_items:
                sentiment = self.sentiment_analysis.analyze_sentiment(title) # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
                self.sentiment_results[currency].append((title, sentiment))

                sentiment_vector = [
                    sentiment['negative'],
                    sentiment['neutral'],
                    sentiment['positive']
                ]

                sentiment_aggregates[currency].append(sentiment_vector)
                max_value = max(sentiment_vector)

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ‚Äî –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤—ã—à–µ 0.7, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                if max_value > 0.7:
                    max_index = sentiment_vector.index(max_value)
                    sentiment_label = ['negative', 'neutral', 'positive'][max_index]
                    sentiment_counts[sentiment_label] += 1
                    threshold_aggregates[currency].append(sentiment_vector)
                else:
                    sentiment_counts['undefined'] += 1

                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}")
            
            sentiment_counts_by_currency[currency] = sentiment_counts

        with self.results_lock:
            self.sentiment_results.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.sentiment_results.update(temp_results)
            # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º
            for currency, values in sentiment_aggregates.items():
                average = np.mean(values, axis=0)
                avg_sentiment = {
                    'negative': round(average[0], 3),
                    'neutral': round(average[1], 3),
                    'positive': round(average[2], 3)
                }
                logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ {currency} (–≤—Å–µ): {avg_sentiment}")
                logger_res.debug(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ {currency} (–≤—Å–µ): {avg_sentiment}")
                self.sentiment_results[currency + "_average_all"] = avg_sentiment

            # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –≤—ã–±–æ—Ä–∫–µ —Å > 0.7
            for currency, values in threshold_aggregates.items():
                if values:
                    average = np.mean(values, axis=0)
                    avg_filtered_sentiment = {
                        'negative': round(average[0], 3),
                        'neutral': round(average[1], 3),
                        'positive': round(average[2], 3)
                    }
                    logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ {currency} (—Ç–æ–ª—å–∫–æ > 0.7): {avg_filtered_sentiment}")
                    logger_res.debug(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ {currency} (—Ç–æ–ª—å–∫–æ > 0.7): {avg_filtered_sentiment}")
                    self.sentiment_results[currency + "_average_strong"] = avg_filtered_sentiment

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for currency, counts in sentiment_counts_by_currency.items():
                logger.info(f"üìà –ö–æ–ª-–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {currency}: {counts}")
                logger_res.debug(f"üìà –ö–æ–ª-–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {currency}: {counts}")
                self.sentiment_results[currency + "_count_stats"] = counts
            logger_res.debug(f"\n")

    def get_sentiment_results(self):
        with self.results_lock:
            return dict(self.sentiment_results)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (—Å—Ä–∞–∑—É –∏ –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)
        self.scheduler.add_job(
            self.fetch_and_store_news,
            'interval',
            minutes=30,
            next_run_time=datetime.now()
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ (—Ç–æ–∂–µ —Å—Ä–∞–∑—É)
        self.scheduler.add_job(
            self.group_and_analyze_news,
            'interval',
            # hours=12,
            minutes=31,
            next_run_time=datetime.now()
        )

        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()

        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –≤ –∂–∏–≤—ã—Ö
        try:
            while True:
                time.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            self.scheduler.shutdown()

# –°–∏–Ω–≥–ª—Ç–æ–Ω –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
main_app_instance = MainApp()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = MainApp()
    app.start()